/**
 * Created by w44 on 15-1-12.
 */
var http = require('http');
var querystring = require('querystring');
var moment = require('moment');
var cons = require('print_constants');
var nodePlatCons = cons.nodePlatCons;

var util = require('print_util');
var digestUtil = util.digestUtil;


var HttpUtil = function () {
};

HttpUtil.prototype.send = function (opt, data, cb) {
    console.log("post send：" + JSON.stringify(data));
    console.log("post：" + JSON.stringify(opt));
    var post_data = querystring.stringify({
        message: data
    });
    var req = http.request(opt, function (res) {
        var data = '';
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            if (res.statusCode == 200) {
                data += chunk;
            } else {
                console.info('服务器返回的状态码有误');
                console.info(chunk);
                setTimeout(function () {
                    cb('err', null);
                }, 1000);
            }
        });
        res.on('end', function () {
            console.info('服务器返回信息');
            console.info(data);
            cb(null, data);
        });
    });

    req.on('error', function (e) {
        console.info('problem with request: ' + e.message);
        setTimeout(function () {
            cb('err', body);
        }, 1000);
    });
    req.write(post_data, "utf8");
    req.end();
};


HttpUtil.prototype.sendToNodePlat = function (cmd, body, cb) {

    var head = nodePlatCons.head;
    head.cmd = cmd;
    head.timestamp = moment().format('YYYY-MM-DDTHH:mm:ss.SSS');
    head.digest = digestUtil.md5(body + head.timestamp + nodePlatCons.key);
    var message = {
        head: head,
        body: body
    };
    console.log("post send：" + JSON.stringify(message));
    var post_data = querystring.stringify({
        message: message
    });

    var req = http.request(querystring.node_plat_opt, function (res) {
        var data = '';
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            if (res.statusCode == 200) {
                data += chunk;
            } else {
                console.info('服务器返回的状态码有误');
                console.info(chunk);
                setTimeout(function () {
                    cb('err', null);
                }, 1000);
            }
        });
        res.on('end', function () {
            try {
                console.info('服务器返回信息: ');
                console.info(data);
                var json = JSON.parse(data);
                var _body = JSON.parse(json.body);
                if (_body.repCode == '0000') {
                    cb(null, _body);
                } else {
                    console.info('服务器返回的状态码有误');
                    setTimeout(function () {
                        cb('err', _body);
                    }, 5000);
                }
            } catch (err) {
                console.info(err);
                console.info('服务器状态有误');
                setTimeout(function () {
                    cb('err', data);
                }, 5000);
            }
        });
    });

    req.on('error', function (e) {
        console.info('problem with request: ' + e.message);
        setTimeout(function () {
            cb('err', body);
        }, 1000);
    });
    req.write(post_data, "utf8");
    req.end();
};

var httpUtil = new HttpUtil();
module.exports = httpUtil;