/**
 * Created by w44 on 15-1-7.
 */


var fs = require('fs');
var Iconv = require('iconv').Iconv;
var async = require('async');
var moment = require('moment');

var cons = require('print_constants');
var msgParam = cons.msgParam;

var DataUtil = function () {
};

DataUtil.prototype.parseHeadNode = function (dataBuf) {
    var headNode = {};
    var encoding = msgParam.encoding;
    try {
        headNode.packageLength = dataBuf.readInt32BE(msgParam.packageBufIndex.start, msgParam.packageBufIndex.end);
        headNode.cmd = dataBuf.toString(encoding, msgParam.cmdBufIndex.start, msgParam.cmdBufIndex.end);
        headNode.sequenceId = dataBuf.toString(encoding, msgParam.sequenceIdBufIndex.start, msgParam.sequenceIdBufIndex.end);
        headNode.terminalId = dataBuf.toString(encoding, msgParam.terminalIdBufIndex.start, msgParam.terminalIdBufIndex.end);
    } catch (err) {
        console.log('头信息解析出错！');
        console.log(err);
        headNode = null;
    }
    return headNode;
};


DataUtil.prototype.handleForBodyNode = function (headNode, cmdDataBuf) {
    var self = this;
    var method = 'parse' + headNode.cmd;
    //添加判断方法逻辑，处理无此方法时的清空
    if (typeof self[method] === 'function') {
        return self[method](headNode, cmdDataBuf);
    } else {
        console.log('找不到解析此BodyNode的方法: '+method);
        return null;
    }
};


    DataUtil.prototype.parse0001 = function (headNode, buf) {
        var bodyNode = {};
        bodyNode.terminalid = headNode.terminalId;
        return bodyNode;
    };

    DataUtil.prototype.parse4000 = function (headNode, buf) {
        var bodyNode = {};
        bodyNode.terminalid = headNode.terminalId;
        return bodyNode;
    };

    DataUtil.prototype.parse0002 = function (headNode, buf) {
        var bodyNode = {};
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var tempBuf = new Buffer(buf.length - 4);
        buf.copy(tempBuf, 0, 4, buf.length);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', 'utf8');
        var utf8_buffer = gb2312_to_utf8_iconv.convert(tempBuf);
        bodyNode.retDesc = utf8_buffer.toString(prop.encoding);
        return bodyNode;
    };

    DataUtil.prototype.parse0052 = function (headNode, buf) {
        var bodyNode = {};
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var tempBuf = new Buffer(buf.length - 4);
        buf.copy(tempBuf, 0, 4, buf.length);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', 'utf8');
        var utf8_buffer = gb2312_to_utf8_iconv.convert(tempBuf);
        bodyNode.retDesc = utf8_buffer.toString(prop.encoding);
        return bodyNode;
    };


    DataUtil.prototype.parse1000 = function (headNode, buf) {
        var bodyNode = {};
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var tempBuf = new Buffer(buf.length - 4);
        buf.copy(tempBuf, 0, 4, buf.length);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', 'utf8');
        var utf8_buffer = gb2312_to_utf8_iconv.convert(tempBuf);
        bodyNode.retDesc = utf8_buffer.toString(prop.encoding);
        return bodyNode;
    };


    DataUtil.prototype.parse0072 = function (headNode, buf) {
        var bodyNode = {};
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var tempBuf = new Buffer(buf.length - 4);
        buf.copy(tempBuf, 0, 4, buf.length);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', 'utf8');
        var utf8_buffer = gb2312_to_utf8_iconv.convert(tempBuf);
        bodyNode.retDesc = utf8_buffer.toString(prop.encoding);
        return bodyNode;
    };

    DataUtil.prototype.parse2000 = function (headNode, buf) {
        var bodyNode = {};
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var tempBuf = new Buffer(buf.length - 4);
        buf.copy(tempBuf, 0, 4, buf.length);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', 'utf8');
        var utf8_buffer = gb2312_to_utf8_iconv.convert(tempBuf);
        bodyNode.retDesc = utf8_buffer.toString(prop.encoding);
        return bodyNode;
    };


    DataUtil.prototype.parse0031 = function (headNode, buf) {
        var bodyNode = {};
        try {
            bodyNode.packagenum = buf.readInt32BE(0);
            //表示当前位置
            var index = 4;
            bodyNode.namelen1 = buf.readInt32BE(index);
            index += 4;
            bodyNode.namedata1 = buf.toString(prop.encoding, index, index + bodyNode.namelen1);
            index += bodyNode.namelen1;
            bodyNode.datalen1 = buf.readInt32BE(index);
            index += 4;
            //转换中文
            var chnbuf2 = new Buffer(bodyNode.datalen1);
            buf.copy(chnbuf2, 0, index, index + bodyNode.datalen1);
            var gb2312_to_utf8_iconv2 = new Iconv('gb2312', prop.encoding);
            var utf8_buffer2 = gb2312_to_utf8_iconv2.convert(chnbuf2);
            bodyNode.data1 = utf8_buffer2.toString(prop.encoding);
            index += bodyNode.datalen1;
            //        bodyNode.data1 = buf.toString(prop.encoding, index, index + bodyNode.datalen1);
            //        index += bodyNode.datalen1
            bodyNode.namelen2 = buf.readInt32BE(index);
            index += 4;
            bodyNode.namedata2 = buf.toString(prop.encoding, index, index + bodyNode.namelen2);
            index += bodyNode.namelen2;
            bodyNode.datalen2 = buf.readInt32BE(index);
            index += 4;
            //直接转换为Base64
            bodyNode.data2 = buf.toString('base64', index, index + bodyNode.datalen2);
            var fileName = moment().format('YYYY-MM-DD');
            var ticketFile = prop.ticketFilePath + fileName;
            fs.appendFile(ticketFile, JSON.stringify(bodyNode) + '\r\r', 'utf-8', function (err) {
                if (err) {
                    console.log(err);
                } else {
                    console.log(bodyNode.namedata1 + '已写入' + ticketFile);
                }
            });
        } catch (err) {
            console.log('0031_BodyNode转换失败,数据格式有误');
            console.log(err);
            bodyNode = null;
        }
        return bodyNode;
    };


    DataUtil.prototype.parse0051 = function (headNode, buf) {
        var bodyNode = {};
        try {
            bodyNode.packagenum = buf.readInt32BE(0);
            //表示当前位置
            var index = 4;
            bodyNode.namelen1 = buf.readInt32BE(index);
            index += 4;
            bodyNode.namedata1 = buf.toString(prop.encoding, index, index + bodyNode.namelen1);
            index += bodyNode.namelen1;
            bodyNode.datalen1 = buf.readInt32BE(index);
            index += 4;
            //转换中文
            var chnbuf2 = new Buffer(bodyNode.datalen1);
            buf.copy(chnbuf2, 0, index, index + bodyNode.datalen1);
            var gb2312_to_utf8_iconv2 = new Iconv('gb2312', prop.encoding);
            var utf8_buffer2 = gb2312_to_utf8_iconv2.convert(chnbuf2);
            bodyNode.data1 = utf8_buffer2.toString(prop.encoding);
            index += bodyNode.datalen1;
            //        bodyNode.data1 = buf.toString(prop.encoding, index, index + bodyNode.datalen1);
            //        index += bodyNode.datalen1
            bodyNode.namelen2 = buf.readInt32BE(index);
            index += 4;
            bodyNode.namedata2 = buf.toString(prop.encoding, index, index + bodyNode.namelen2);
            index += bodyNode.namelen2;
            bodyNode.datalen2 = buf.readInt32BE(index);
            index += 4;
            //直接转换为Base64
            bodyNode.data2 = buf.toString('base64', index, index + bodyNode.datalen2);
            var fileName = moment().format('YYYY-MM-DD');
            var ticketFile = prop.ticketFilePath + fileName;
            fs.appendFile(ticketFile, JSON.stringify(bodyNode) + '\r\r', 'utf-8', function (err) {
                if (err) {
                    console.log(err);
                } else {
                    console.log(bodyNode.namedata1 + '已写入' + ticketFile);
                }
            });
        } catch (err) {
            console.log('0051_BodyNode转换失败,数据格式有误');
            console.log(err);
            bodyNode = null;
        }
        return bodyNode;
    };


    DataUtil.prototype.parse0061 = function (headNode, buf) {
        var bodyNode = {};
        bodyNode.playId = buf.toString(prop.encoding, 0, 4);
        //获取data
        var chnbuf = new Buffer(buf.length - 4);
        buf.copy(chnbuf, 0, 4, buf.length);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', prop.encoding);
        var utf8_buffer = gb2312_to_utf8_iconv.convert(chnbuf);
        bodyNode.data = utf8_buffer.toString(prop.encoding);
        return bodyNode;
    };


    DataUtil.prototype.parse0071 = function (headNode, buf) {
        var bodyNode = {};
        var gb2312_to_utf8_iconv = new Iconv('gb2312', prop.encoding);
        var utf8_buffer = gb2312_to_utf8_iconv.convert(buf);
        bodyNode.data = utf8_buffer.toString(prop.encoding);
        return bodyNode;
    };


    DataUtil.prototype.parse0004 = function (headNode, buf) {
        var bodyNode = {};
        //计算长度
        //ticketId为32位,retCode为4位,总长度-32-4即retDesc长度
        var retDescLength = buf.length - 32 - 4;
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var tempBuf = new Buffer(retDescLength);
        buf.copy(tempBuf, 0, 4, retDescLength + 4);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', prop.encoding);
        var utf8_buffer = gb2312_to_utf8_iconv.convert(tempBuf);
        bodyNode.retDesc = utf8_buffer.toString(prop.encoding)
        bodyNode.ticketId = buf.toString(prop.encoding, 4 + retDescLength, 4 + retDescLength + 32);
        return bodyNode;
    };


    DataUtil.prototype.parse0032 = function (headNode, buf) {
        var bodyNode = {};
        //计算长度
        //ticketId为32位,retCode为4位,总长度-32-4即retDesc长度
        var retDescLength = buf.length - 32 - 4;
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var tempBuf = new Buffer(retDescLength);
        buf.copy(tempBuf, 0, 4, retDescLength + 4);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', prop.encoding);
        var utf8_buffer = gb2312_to_utf8_iconv.convert(tempBuf);
        bodyNode.retDesc = utf8_buffer.toString(prop.encoding)
        bodyNode.ticketId = buf.toString(prop.encoding, 4 + retDescLength, 4 + retDescLength + 32);
        return bodyNode;
    };


    DataUtil.prototype.parse0033 = function (headNode, buf) {
        var bodyNode = {};
        //计算长度
        //ticketId为32位,retCode为4位,总长度-32-4即retDesc长度
        var retDescLength = buf.length - 32 - 4;
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var tempBuf = new Buffer(retDescLength);
        buf.copy(tempBuf, 0, 4, retDescLength + 4);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', prop.encoding);
        var utf8_buffer = gb2312_to_utf8_iconv.convert(tempBuf);
        bodyNode.retDesc = utf8_buffer.toString(prop.encoding)
        bodyNode.ticketId = buf.toString(prop.encoding, 4 + retDescLength, 4 + retDescLength + 32);
        return bodyNode;
    };

    DataUtil.prototype.parse0054 = function (headNode, buf) {
        var bodyNode = {};
        //计算长度
        //ticketId为32位,retCode为4位,总长度-32-4即retDesc长度
        var retDescLength = buf.length - 32 - 4;
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var tempBuf = new Buffer(retDescLength);
        buf.copy(tempBuf, 0, 4, retDescLength + 4);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', prop.encoding);
        var utf8_buffer = gb2312_to_utf8_iconv.convert(tempBuf);
        bodyNode.retDesc = utf8_buffer.toString(prop.encoding)
        bodyNode.ticketId = buf.toString(prop.encoding, 4 + retDescLength, 4 + retDescLength + 32);
        return bodyNode;
    };

    module.exports = new DataUtil();