/**
 * Created by w44 on 15-1-8.
 */


var TerminalControl = function (socket) {
    var self = this;
    self.socket = socket;
};



TerminalControl.prototype.handle = function (headNode, bodyNode) {
    var self = this;
    var cmd=headNode.cmd;
    console.log(JSON.stringify(headNode));
    console.log(JSON.stringify(bodyNode));
//    if (cmd == "0001") {
//        self.handle0001(headNode, bodyNode);
//    } else if (cmd == '0002') {
//        self.handle0002(headNode, bodyNode);
//    } else if (cmd == '0031') {
//        self.handle0003(headNode, bodyNode);
//    } else if (cmd == '0051') {
//        self.handle0003(headNode, bodyNode);
//    } else if (cmd == '0052') {
//        self.handle0052(headNode, bodyNode);
//    } else if (cmd == '0061') {
//        self.handle0061(headNode, bodyNode);
//    } else if (cmd == '0071') {
//        self.handle0071(headNode, bodyNode);
//    } else if (cmd == '0072') {
//        self.handle0072(headNode, bodyNode);
//    } else if (cmd == '1000') {
//        self.handle1000(headNode, bodyNode);
//    } else if (cmd == '0004') {
//        self.handle0004(headNode, bodyNode);
//    } else if (cmd == '2000') {
//        self.handle2000(headNode, bodyNode);
//    } else if (cmd == '0032' || cmd == '0033') {
//        self.handle0032(headNode, bodyNode);
//    } else if (cmd == '0054') {
//        self.handle0054(headNode, bodyNode);
//    } else if (cmd == '4000') {
//        self.handle4000(headNode, bodyNode);
//    }
};



TerminalControl.prototype.getBodyNode = function (cmd, buf, headNode) {
    var self = this;
    var bodyNode = {};
    if (cmd == "0001" || cmd == '4000') {
        bodyNode.terminalid = headNode.terminalId;
    } else if (cmd == '0002' || cmd == '0052' || cmd == '1000' || cmd == '0072' || cmd == '2000') {
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var chnbuf = new Buffer(buf.length - 4);
        buf.copy(chnbuf, 0, 4, buf.length);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', 'utf8');
        var utf8_buffer = gb2312_to_utf8_iconv.convert(chnbuf);

        bodyNode.retDesc = utf8_buffer.toString(prop.encoding);
    } else if (cmd == '0031' || cmd == '0051') { //0003 出票完成后发送的请求 0051 查询后返回的数据,格式一样
        try {
            bodyNode.packagenum = buf.readInt32BE(0);
            //表示当前位置
            var index = 4;
            bodyNode.namelen1 = buf.readInt32BE(index);

            index += 4;
            bodyNode.namedata1 = buf.toString(prop.encoding, index, index + bodyNode.namelen1);
            index += bodyNode.namelen1;

            bodyNode.datalen1 = buf.readInt32BE(index);
            index += 4;
            //转换中文
            var chnbuf2 = new Buffer(bodyNode.datalen1);
            buf.copy(chnbuf2, 0, index, index + bodyNode.datalen1);
            var gb2312_to_utf8_iconv2 = new Iconv('gb2312', prop.encoding);
            var utf8_buffer2 = gb2312_to_utf8_iconv2.convert(chnbuf2);


            bodyNode.data1 = utf8_buffer2.toString(prop.encoding);
            index += bodyNode.datalen1;

            //        bodyNode.data1 = buf.toString(prop.encoding, index, index + bodyNode.datalen1);
            //        index += bodyNode.datalen1


            bodyNode.namelen2 = buf.readInt32BE(index);
            index += 4;


            bodyNode.namedata2 = buf.toString(prop.encoding, index, index + bodyNode.namelen2);

            index += bodyNode.namelen2;
            bodyNode.datalen2 = buf.readInt32BE(index);
            index += 4;

            //直接转换为Base64
            bodyNode.data2 = buf.toString('base64', index, index + bodyNode.datalen2);

            var fileName = moment().format('YYYY-MM-DD');
            var ticketFile = prop.ticketFilePath + fileName;

            fs.appendFile(ticketFile, JSON.stringify(bodyNode) + '\r\r', 'utf-8', function (err) {
                if (err) {
                    logger.info(err);
                } else {
                    logger.info(bodyNode.namedata1 + '已写入' + ticketFile);
                }
            });

        } catch (err) {
            logger.info('0003/0051传来数据格式有误');
            logger.info(err);
            bodyNode = null;
        }
    } else if (cmd == '0061') {
        //首先获取0061的playId
        bodyNode.playId = buf.toString(prop.encoding, 0, 4);
        logger.info(bodyNode.playId);
        //获取data
        var chnbuf = new Buffer(buf.length - 4);
        buf.copy(chnbuf, 0, 4, buf.length);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', prop.encoding);
        var utf8_buffer = gb2312_to_utf8_iconv.convert(chnbuf);
        bodyNode.data = utf8_buffer.toString(prop.encoding);

    } else if (cmd == '0071') {
        //获取data
        var gb2312_to_utf8_iconv = new Iconv('gb2312', prop.encoding);
        var utf8_buffer = gb2312_to_utf8_iconv.convert(buf);
        bodyNode.data = utf8_buffer.toString(prop.encoding);
    } else if (cmd == '0004' || cmd == '0032' || cmd == '0033' || cmd == '0054') {
        logger.info(buf.length);
        //计算长度
        //ticketId为32位,retCode为4位,总长度-32-4即retDesc长度
        var retDescLength = buf.length - 32 - 4;
        bodyNode.retCode = buf.toString(prop.encoding, 0, 4);
        //转化弄成中文
        var chnbuf = new Buffer(retDescLength);
        buf.copy(chnbuf, 0, 4, retDescLength + 4);
        var gb2312_to_utf8_iconv = new Iconv('gb2312', prop.encoding);
        var utf8_buffer = gb2312_to_utf8_iconv.convert(chnbuf);
        bodyNode.retDesc = utf8_buffer.toString(prop.encoding)

        bodyNode.ticketId = buf.toString(prop.encoding, 4 + retDescLength, 4 + retDescLength + 32);
    }
    return bodyNode;
};

module.exports = TerminalControl;