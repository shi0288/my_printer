/**
 * Created by w44 on 15-2-25.
 */

var async=require('async');

var util = require('print_util');
var mongoDBUtil = util.mongoDBUtil;
var log = util.log;

var memory = require('print_memory');
var terminalArray = memory.terminalArray;

var uuid = require('node-uuid');

var cons = require('print_constants');
var terminalCons = cons.terminalCons;

var PrintControl = function(){};


PrintControl.prototype.changeTerminalStatus= function (bodyNode) {
    var self = this;
    var method = 'changeStatus' + bodyNode.status;
    log.error(bodyNode.status);
    //添加判断方法逻辑，处理无此方法时的清空
    if (typeof self[method] === 'function') {
        self[method](bodyNode.id);
    } else {
        log.info('找不到处理此命令的方法: ' + method);
    }
};

PrintControl.prototype.changeStatus1300 = function (terminalId) {
    var self = this;
    async.waterfall([function (cb) {
        for (var i = 0; i < terminalArray.length; i++) {
            if (terminalId == terminalArray[i].terminalId) {
                terminalArray[i].status = terminalCons.terminal.status.print;
                cb(null, terminalArray[i]);
            }
        }
    }, function (terminal, cb) {
        var headNode = {cmd: '0009', sequenceId: uuid.v4().replace(/\-/g, ''), terminalId: terminal.terminalId};
        var bodyNode = {switchPrize: 2};
        terminal.terminalControl.send0009(headNode, bodyNode);
        log.info(terminalId + "   已指定打印状态,等待终端机返回");
        mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
            collection.findAndModify({'id': terminalId}, {'id': -1}, {$set: {status: terminalCons.terminal.status.print}}, {new: true}, function (err, result) {
                var msg = JSON.stringify(result);
                terminal.terminalControl.io.emit('statusChange', msg);
                cb(null);
            })
        });
    }], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
        }
    })
};


PrintControl.prototype.changeStatus1000 = function (terminalId) {
    var self = this;
    async.waterfall([function (cb) {
        for (var i = 0; i < terminalArray.length; i++) {
            if (terminalId == terminalArray[i].terminalId) {
                terminalArray[i].status = terminalCons.terminal.status.available;
                cb(null, terminalArray[i]);
            }
        }
    }, function (terminal, cb) {
        var headNode = {cmd: '0009', sequenceId: uuid.v4().replace(/\-/g, ''), terminalId: terminal.terminalId};
        var bodyNode = {switchPrize: 0};
        terminal.terminalControl.send0009(headNode, bodyNode);
        log.info(terminalId + "已指定出票状态,等待终端机返回");
        mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
            collection.findAndModify({'id': terminalId}, {'id': -1}, {$set: {status: terminalCons.terminal.status.available}}, {new: true}, function (err, result) {
                var msg = JSON.stringify(result);
                log.error(msg);
               // terminal.terminalControl.io.emit('statusChange', msg);
            })
        });
        cb(null);
    }], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
        }
    })
};

PrintControl.prototype.changeStatus1100 = function (terminalId) {
    var self = this;
    async.waterfall([function (cb) {
        for (var i = 0; i < terminalArray.length; i++) {
            if (terminalId == terminalArray[i].terminalId) {
                terminalArray[i].status = terminalCons.terminal.status.search;
                var _terminal = terminalArray[i];
                log.info(terminalId + "已指定查询状态");
                //todo 注意终端机没有查询模式,不需要发送请求,直接修改数组后修改数据库,然后向界面发送即可
                mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
                    collection.findAndModify({'id': terminalId}, {'id': -1}, {$set: {status: terminalCons.terminal.status.search}}, {new: true}, function (err, result) {
                        var msg = JSON.stringify(result);
                        _terminal.terminalControl.io.emit('statusChange', msg);
                        log.info('已指定终端机' + result.id + '为查询,等待终端机返回');
                        var headNode = {
                            cmd: '0009',
                            sequenceId: uuid.v4().replace(/\-/g, ''),
                            terminalId: terminalId
                        };
                        var bodyNode = {switchPrize: 0};
                        _terminal.terminalControl.send0009(headNode, bodyNode);
                    })
                });
                cb(null);
            }
        }
    }], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
        }
    })
};


PrintControl.prototype.changeStatus1200 = function (terminalId) {
    var self = this;
    async.waterfall([function (cb) {
        for (var i = 0; i < terminalArray.length; i++) {
            if (terminalId == terminalArray[i].terminalId) {
                terminalArray[i].status = terminalCons.terminal.status.bonus;
                cb(null, terminalArray[i]);
            }
        }
    }, function (terminal, cb) {
        var headNode = {cmd: '0009', sequenceId: uuid.v4().replace(/\-/g, ''), terminalId: terminal.terminalId};
        var bodyNode = {switchPrize: 1};
        terminal.terminalControl.send0009(headNode, bodyNode);
        log.info(terminalId + "已指定兑奖状态,等待终端机返回");
        mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
            collection.findAndModify({'id': terminalId}, {'id': -1}, {$set: {status: terminalCons.terminal.status.bonus}}, {new: true}, function (err, result) {
                var msg = JSON.stringify(result);
                terminal.terminalControl.io.emit('statusChange', msg);
            })
        });
        cb(null);
    }], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
        }
    })
};



var PrintControl = new PrintControl();
module.exports = PrintControl;