/**
 * Created by w44 on 15-1-8.
 */


var CronJob = require('cron').CronJob;
var moment = require('moment');
var async = require('async');
var nodePlatAssist = require('print_assist').nodePlatAssist;
var uuid = require('node-uuid');
var cons = require('print_constants');
var nodePlatCons=cons.nodePlatCons;
var terminalCons=cons.terminalCons;

var util = require('print_util');
var mongoDBUtil = util.mongoDBUtil;
var terminalDataUtil=util.terminalDataUtil;
var log=util.log;

var memory = require('print_memory');
var terminalArray = memory.terminalArray;
var webIo = memory.webIo;

var TicketControl = function () {
};



TicketControl.prototype.run=function(){
    var self=this;
    self.sendPrintTicket();
    self.dealPrintSuccessToPlat();
};


TicketControl.prototype.sendPrintTicket = function () {

    new CronJob('*/5 * * * * *', function () {
        log.info('出票任务#########');
        async.waterfall([function (cb) {
           /**
             * 1.从配置文件中读取所有的彩种
             * 1.1.检查可用终端机
             * 2.循环findAndRemove
             * 3.同一彩种写入同一数组
             * 4.批量处理
             */
            var gameCodeArr = nodePlatCons.gamCodeArray;
            //todo 最终的cb只能调用一次
            for (var i = 0; i < gameCodeArr.length; i++) {
                //检查是否有可用终端机
                var terminals = [];
                for (var j = 0; j < terminalArray.length; j++) {
                    if (terminalArray[j].gameCode[gameCodeArr[i]] && terminalArray[j].status == terminalCons.terminal.status.available) {
                        terminals.push(terminalArray[j]);
                    }
                }
                if (terminals.length > 0) {
                    //有当前彩种可用终端机
                    cb(null, terminals, gameCodeArr[i]);
                } else {
                    cb('无可用终端机');
                }
            }
        }, function (terminals, gameCode, cb) {
            var arr = [];
            var array = new Array();
            var index = 100;
            if (gameCode == 'T05' || gameCode == 'T06') {
                index = 50;
            }
            for (var i = 0; i < index; i++) {
                array.push(i)
            }
            var now = parseInt(moment().format('HH'));
            if (now > 19 && gameCode != 'T05' && gameCode != 'T06') {
                cb('8点以后不打普通彩种');
            }
            mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, collection) {
                async.each(array, function (item, callback) {
                    collection.findAndRemove({
                        'gameCode': gameCode
                    }, [], function (err, result) {
                        if (result) {
                            arr.push(result);
                        }
                        callback(null);
                    })
                }, function (err) {
                    cb(null, terminals, gameCode, arr);
                })
            });
        }, function (terminals, gameCode, tickets, cb) {
            //判断集合大小
            if (tickets.length > 0) {
                //有可用票
                cb(null, terminals, tickets);
            } else {
                cb('没有票');
            }
        }, function (terminals, tickets, cb) {
            //随机一个终端机
            var terminal = terminals[Math.floor(Math.random() * terminals.length)];
            if (terminal.status == terminalCons.terminal.status.available) {
                terminal.status = terminalCons.terminal.status.inPrint;
                terminal.terminal.status = terminalCons.terminal.status.inPrint;
                var msg = JSON.stringify(terminal.terminal);
                webIo.io.emit('statusChange', msg);
                var ticks = new Array;
                //给每一张票加上seqID等参数
                for (var i = 0; i < tickets.length; i++) {
                    tickets[i].seqId = uuid.v4().replace(/\-/g, '');
                    tickets[i].takeTime = new Date().getTime();
                    tickets[i].terminalId = terminal.terminalId;
                    ticks.push(tickets[i]);
                }
                console.log('票长度' + ticks.length);
                cb(null, terminal, ticks);
            } else {
                mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, collection) {
                    async.each(tickets, function (item) {
                        delete item['_id'];
                        collection.insert(item, function () {
                        })
                    }, function () {
                    })
                })
            }
        }, function (terminal, tickets, cb) {
            //修改状态
            //转移库,发送
            mongoDBUtil.db.collection('waitTerminal' + terminal.terminalName, {safe: true}, function (err, collection) {
                async.each(tickets, function (item) {
                    item.terminalTakeTime = new Date().getTime();
                    collection.insert(item, function () {
                         console.log(item.id + '已进入' + terminal.terminalName + '等待处理库');
                    })
                }, function (err) {
                })
            });
            var headNode = {};
            headNode.cmd = '0002';
            headNode.sequenceId = tickets[0].seqId;
            headNode.terminalId = terminal.terminalId;
            var bodyNode = {};
            var ticketTrans = new Array;
            //转换数据
            for (var i = 0; i < tickets.length; i++) {
                var ticket = {};
                //测试环境
                if (nodePlatCons.mode == 'test') {
                    if (tickets[i].gameCode == 'T53') {
                        //十四场不同,注意区分
                        if (tickets[i].playTypeCode == '01') {
                            ticket.namedata = moment().add(20, 'minute').format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].code01 + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].playType[tickets[i].playTypeCode + tickets[i].betTypeCode].tCode + '-05005-' + tickets[i].amount;
                        } else {
                            ticket.namedata = moment().add(20, 'minute').format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].code02 + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].playType[tickets[i].playTypeCode + tickets[i].betTypeCode].tCode + '-05005-' + tickets[i].amount;
                        }
                    } else if (tickets[i].gameCode == 'T05' || tickets[i].gameCode == 'T06') {
                        ticket.namedata = '150226200000' + '-' + tickets[i].id + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].code + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].playType[tickets[i].playTypeCode + tickets[i].betTypeCode].tCode + '-'+tickets[i].termCode+'-' + tickets[i].amount;
                        console.log(ticket.namedata);
                    } else if (tickets[i].gameCode == 'T51') {
                        //竞彩
                        ticket.namedata = moment().add(1, 'days').format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].code + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].tCode + '-' + tickets[i].termCode + '-' + tickets[i].amount;
                    } else {
                        ticket.namedata = moment().add(1, 'days').format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].code + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].playType[tickets[i].playTypeCode + tickets[i].betTypeCode].tCode + '-05005-' + tickets[i].amount;
                    }
                }
                ticket.namelen = ticket.namedata.length;
                //号码相关
                if (nodePlatCons.mode == 'test') {
                    if (typeof tickets[i].numbers == 'undefined') {
                        tickets[i].numbers = tickets[i].number;
                    }
                    if (tickets[i] == 'T51') {
                        //竞彩相关
                        var numbers = terminalDataUtil.numberTrans(tickets[i].gameCode, tickets[i].playTypeCode, tickets[i].betTypeCode, tickets[i].numbers);
                    } else {
                        var numbers = terminalDataUtil.numberTrans(tickets[i].gameCode, tickets[i].playTypeCode, tickets[i].betTypeCode, tickets[i].numbers);
                    }
                }
                if (tickets[i].gameCode == 'T53' || tickets[i].gameCode == 'T54' || tickets[i].gameCode == 'T55') {
                    var zcTerm = termUtil.zcSellTerm();
                    var index = '-:' + zcTerm[tickets[i].gameCode][tickets[i].termCode].index + '\n';
                    ticket.data = terminalDataUtil.transNumbers(tickets[i].gameCode, tickets[i].playTypeCode, tickets[i].betTypeCode, tickets[i].multiple) + index + numbers + '\n';
                } else {
                    ticket.data = terminalDataUtil.transNumbers(tickets[i].gameCode, tickets[i].playTypeCode, tickets[i].betTypeCode, tickets[i].multiple) + numbers + '\n';
                }
                ticket.datalen = ticket.data.length;
                ticketTrans.push(ticket);
            }
            bodyNode.tickets = ticketTrans;
            terminal.terminalControl.send0002(headNode, bodyNode);
            cb(null);
        }], function (err, result) {
            if (err) {
                log.info('err: ', err); // -> null
            }
        })
    }, null, true, 'Asia/Chongqing');
};





//将出票成功且没有及时返回的票再次给平台
TicketControl.prototype.dealPrintSuccessToPlat =function(){

    new CronJob('0 */15 * * * *', function () {
        mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
            collection.remove({gameCode: {$nin: ['T01', 'T02', 'T03', 'T04', 'T05', 'T06', 'T51', 'T53', 'T54', 'T55']}}, {safe: true}, function () {
                //每隔15分钟扫描一次没有给平台返成功的状态的票
                //获取15分钟以前的时间的值
                var tenMinAgo = moment().add(-10, 'minute').valueOf();
                collection.find({
                    platStatus: {$ne: '0000'},
                    terminalReturnTime: {$lt: tenMinAgo}
                }).toArray(function (err, tickets) {
                    if (!err && tickets) {
                        async.eachSeries(tickets, function (result, cb) {
                            nodePlatAssist.sentP02(result,function(err,backMsgNode){
                                //todo  处理平台返回
                                if(!err){
                                    var _body = JSON.parse(backMsgNode.body);
                                    mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
                                        collection.update({id: result.id}, {
                                            $set: {platStatus: '0000'}
                                        }, {}, function (err, res) {
                                            log.info(result.id + '平台状态 : ' +'0000');
                                            cb();
                                        })
                                    });
                                }
                            });

                        }, function () {

                        })
                    }
                })
            })
        })
    }, null, true, 'Asia/Chongqing');

};





var ticketControl = new TicketControl();
module.exports = ticketControl;