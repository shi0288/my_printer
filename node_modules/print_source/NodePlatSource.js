/**
 * Created by w44 on 15-1-12.
 */

var CronJob = require('cron').CronJob;
var nodePlatAssist = require('print_assist').nodePlatAssist;

var util = require('print_util');
var mongoDBUtil = util.mongoDBUtil;
var digestUtil = util.digestUtil;
var log = util.log;

var cons = require('print_constants');
var nodePlatCons = cons.nodePlatCons;

var assist = require('print_assist');
var queryAssist = assist.queryAssist;

var memory = require('print_memory');
var webIo = memory.webIo;

var async = require('async');

var NodePlatSource = function () {
};

NodePlatSource.prototype.handle = function () {
    var self = this;
    //开启获取待出票队列任务
    self.catchWaitQueenTask.start();
    self.catchWaitQueenTaskStatus = true;
};

NodePlatSource.prototype.catchWaitQueenTask = new CronJob('*/5 * * * * *', function () {
    console.log("###########################   get tickets to waitQueen    ###########################");
    NodePlatSource.prototype.getWaitTickets();
});


NodePlatSource.prototype.getWaitTickets = function () {
    nodePlatAssist.sentP01(function (err, backMsgNode) {
        if (err) {
            log.error(err);
        } else {
            //获取到订单集合
            var backBodyStr = digestUtil.check(backMsgNode.head, nodePlatCons.key, backMsgNode.body);
            var backBodyNode = JSON.parse(backBodyStr);
            if (backBodyNode && backBodyNode.repCode == '0000') {
                var tickets = backBodyNode.rst;
                if (tickets.length == 0) {
                    log.info("no tickets to print........");
                    return;
                }
                //直接入等待票库
                mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, collection) {
                    async.each(tickets, function (item) {
                        item.playTypeCode = item.pType;
                        item.betTypeCode = item.bType;
                        if (item.number) {
                            item.numbers = item.number;
                            delete  item.number;
                        }
                        delete  item.pType;
                        delete  item.bType;
                        //不足32位高位补0
                        var length = 32 - (item.id + '').length;
                        for (var i = 0; i < length; i++) {
                            item.id = '0' + item.id;
                        }
                        collection.insert(item, function () {
                            log.info(item.id + "已入等待终端处理库");
                        });
                    }, function (err) {
                        //todo  what
                    });
                    // 通知页面
                    queryAssist.getWaitQueen(function () {
                        if (!err) {
                            queryAssist.getWaitQueen(function (err, termInfo) {
                                webIo.io.emit('waitQueen', termInfo);
                            });
                        }
                    });
                });

            }
        }
    });
};


var nodePlatSource = new NodePlatSource();


module.exports = nodePlatSource;



